# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-10-15 16:48
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import dye.validators
import sorl.thumbnail.fields
import tinyuuidfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Waiting'), (2, 'Approved'), (3, 'Denied')], default=1)),
                ('author', models.CharField(max_length=1000)),
                ('title', models.CharField(max_length=1000)),
                ('journal', models.CharField(max_length=250)),
                ('volume', models.CharField(max_length=100)),
                ('doi', models.CharField(max_length=500, unique=True, verbose_name='DOI')),
                ('pages', models.CharField(max_length=20)),
                ('issue_nr', models.CharField(blank=True, max_length=100, null=True)),
                ('eid', models.CharField(blank=True, max_length=100, null=True)),
                ('year', models.DateField()),
                ('electronic_id', models.CharField(max_length=250)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('keywords', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AtomicContribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_id', tinyuuidfield.fields.TinyUUIDField(blank=True, editable=False, max_length=10, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Waiting'), (2, 'Approved'), (3, 'Denied')], default=1)),
                ('items', models.ManyToManyField(related_name='upload', to='dye.AtomicContribution')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('upload_performance_data', 'Can upload performance data'), ('set_contribution_status', 'Can change status on contributions')),
            },
        ),
        migrations.CreateModel(
            name='Molecule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Waiting'), (2, 'Approved'), (3, 'Denied')], default=1)),
                ('smiles', models.CharField(help_text='Benzene: C1=CC=CC=C1', max_length=1000, unique=True, validators=[dye.validators.validate_smiles], verbose_name='SMILES')),
                ('inchi', models.CharField(max_length=1000, unique=True, verbose_name='INCHI')),
                ('image', sorl.thumbnail.fields.ImageField(blank=True, null=True, upload_to='molecules', verbose_name='Picture')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('keywords', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Waiting'), (2, 'Approved'), (3, 'Denied')], default=1)),
                ('voc', models.DecimalField(decimal_places=4, help_text='[mV]', max_digits=15, verbose_name='VOC')),
                ('jsc', models.DecimalField(decimal_places=5, help_text='[mA/cm^2]', max_digits=15, verbose_name='JSC')),
                ('ff', models.DecimalField(decimal_places=5, max_digits=13, verbose_name='FF')),
                ('pce', models.DecimalField(decimal_places=5, help_text='%, 0-1', max_digits=13, verbose_name='PCE')),
                ('electrolyte', models.CharField(max_length=1000)),
                ('active_area', models.CharField(blank=True, help_text='[cm2]', max_length=30, null=True)),
                ('co_adsorbent', models.CharField(blank=True, max_length=250, null=True)),
                ('co_sensitizer', models.CharField(blank=True, max_length=1000, null=True)),
                ('semiconductor', models.CharField(max_length=1000)),
                ('dye_loading', models.CharField(help_text='[nmol/cm2]', max_length=1000)),
                ('exposure_time', models.CharField(max_length=500)),
                ('solar_simulator', models.CharField(default='AM 1.5g', max_length=1000)),
                ('short_id', tinyuuidfield.fields.TinyUUIDField(blank=True, editable=False, max_length=10, unique=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='dye.Article')),
                ('molecule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='dye.Molecule')),
            ],
            options={
                'verbose_name': 'DSSC performance',
            },
        ),
        migrations.CreateModel(
            name='Spectrum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Waiting'), (2, 'Approved'), (3, 'Denied')], default=1)),
                ('absorption_maxima', models.DecimalField(blank=True, decimal_places=4, help_text='[nm]', max_digits=10, null=True)),
                ('emission_maxima', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('solvent', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spectra', to='dye.Article')),
                ('molecule', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='spectrum', to='dye.Molecule')),
            ],
            options={
                'verbose_name': 'Molecule spectrum',
                'verbose_name_plural': 'Molecule spectra',
            },
        ),
        migrations.CreateModel(
            name='Spreadsheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Waiting'), (2, 'Approved'), (3, 'Denied')], default=1)),
                ('file', models.FileField(upload_to='spreadsheets')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='spectrum',
            unique_together=set([('molecule', 'article')]),
        ),
        migrations.AlterUniqueTogether(
            name='performance',
            unique_together=set([('article', 'molecule', 'voc', 'jsc', 'ff', 'pce')]),
        ),
    ]
